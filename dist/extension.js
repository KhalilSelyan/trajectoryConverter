(()=>{"use strict";var __webpack_modules__={465:(__unused_webpack_module,exports,__webpack_require__)=>{eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.activate = void 0;\nconst utils_1 = __webpack_require__(679);\nfunction activate(extensionContext) {\n    extensionContext.registerMessageConverter({\n        fromSchemaName: "autoware_auto_planning_msgs/msg/Trajectory",\n        toSchemaName: "foxglove.SceneUpdate",\n        converter: (msg) => {\n            const { points } = msg;\n            const triangleList = {\n                pose: {\n                    position: { x: 0, y: 0, z: 0 },\n                    orientation: { x: 0, y: 0, z: 0, w: 1 },\n                },\n                points: [],\n                color: { r: 0, g: 0, b: 0, a: 0 },\n                colors: [],\n                indices: [],\n            };\n            const width = 1.25; // Rectangle\'s half-width\n            for (let i = 0; i < points.length - 1; i++) {\n                const p1 = points[i];\n                const p2 = points[i + 1];\n                const color1 = (0, utils_1.setColorDependsOnVelocity)(8.33, p1.longitudinal_velocity_mps);\n                const color2 = (0, utils_1.setColorDependsOnVelocity)(8.33, p2.longitudinal_velocity_mps);\n                const direction = {\n                    x: p2.pose.position.x - p1.pose.position.x,\n                    y: p2.pose.position.y - p1.pose.position.y,\n                };\n                const normal = {\n                    x: -direction.y,\n                    y: direction.x,\n                };\n                const length = Math.sqrt(normal.x * normal.x + normal.y * normal.y);\n                normal.x /= length;\n                normal.y /= length;\n                const corners = [\n                    {\n                        x: p1.pose.position.x + normal.x * width,\n                        y: p1.pose.position.y + normal.y * width,\n                        z: p1.pose.position.z + 0.1,\n                    },\n                    {\n                        x: p1.pose.position.x - normal.x * width,\n                        y: p1.pose.position.y - normal.y * width,\n                        z: p1.pose.position.z + 0.1,\n                    },\n                    {\n                        x: p2.pose.position.x + normal.x * width,\n                        y: p2.pose.position.y + normal.y * width,\n                        z: p2.pose.position.z + 0.1,\n                    },\n                    {\n                        x: p2.pose.position.x - normal.x * width,\n                        y: p2.pose.position.y - normal.y * width,\n                        z: p2.pose.position.z + 0.1,\n                    },\n                ];\n                triangleList.points.push(...corners);\n                triangleList.colors.push(color1, color1, color2, color2);\n                triangleList.indices.push(0 + i * 4, 1 + i * 4, 2 + i * 4, 1 + i * 4, 2 + i * 4, 3 + i * 4);\n            }\n            const sceneUpdate = {\n                deletions: [],\n                entities: [\n                    {\n                        id: "path",\n                        arrows: [],\n                        lines: [],\n                        cubes: [],\n                        spheres: [],\n                        cylinders: [],\n                        models: [],\n                        texts: [],\n                        triangles: [triangleList],\n                        timestamp: msg.header.stamp,\n                        frame_id: msg.header.frame_id,\n                        frame_locked: false,\n                        lifetime: {\n                            sec: 1,\n                            nsec: 0,\n                        },\n                        metadata: [],\n                    },\n                ],\n            };\n            return sceneUpdate;\n        },\n    });\n}\nexports.activate = activate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDY1LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdCQUFnQjtBQUNoQixnQkFBZ0IsbUJBQU8sQ0FBQyxHQUFTO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0EsZ0NBQWdDLGtCQUFrQjtBQUNsRCxtQ0FBbUMsd0JBQXdCO0FBQzNELGlCQUFpQjtBQUNqQjtBQUNBLHlCQUF5Qix3QkFBd0I7QUFDakQ7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDLDRCQUE0Qix1QkFBdUI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBLGdCQUFnQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RyYWplY3RvcnlDb252ZXJ0ZXIvLi9zcmMvaW5kZXgudHM/MzNiYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYWN0aXZhdGUgPSB2b2lkIDA7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5mdW5jdGlvbiBhY3RpdmF0ZShleHRlbnNpb25Db250ZXh0KSB7XG4gICAgZXh0ZW5zaW9uQ29udGV4dC5yZWdpc3Rlck1lc3NhZ2VDb252ZXJ0ZXIoe1xuICAgICAgICBmcm9tU2NoZW1hTmFtZTogXCJhdXRvd2FyZV9hdXRvX3BsYW5uaW5nX21zZ3MvbXNnL1RyYWplY3RvcnlcIixcbiAgICAgICAgdG9TY2hlbWFOYW1lOiBcImZveGdsb3ZlLlNjZW5lVXBkYXRlXCIsXG4gICAgICAgIGNvbnZlcnRlcjogKG1zZykgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBwb2ludHMgfSA9IG1zZztcbiAgICAgICAgICAgIGNvbnN0IHRyaWFuZ2xlTGlzdCA9IHtcbiAgICAgICAgICAgICAgICBwb3NlOiB7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiB7IHg6IDAsIHk6IDAsIHo6IDAgfSxcbiAgICAgICAgICAgICAgICAgICAgb3JpZW50YXRpb246IHsgeDogMCwgeTogMCwgejogMCwgdzogMSB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcG9pbnRzOiBbXSxcbiAgICAgICAgICAgICAgICBjb2xvcjogeyByOiAwLCBnOiAwLCBiOiAwLCBhOiAwIH0sXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbXSxcbiAgICAgICAgICAgICAgICBpbmRpY2VzOiBbXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCB3aWR0aCA9IDEuMjU7IC8vIFJlY3RhbmdsZSdzIGhhbGYtd2lkdGhcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHAxID0gcG9pbnRzW2ldO1xuICAgICAgICAgICAgICAgIGNvbnN0IHAyID0gcG9pbnRzW2kgKyAxXTtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2xvcjEgPSAoMCwgdXRpbHNfMS5zZXRDb2xvckRlcGVuZHNPblZlbG9jaXR5KSg4LjMzLCBwMS5sb25naXR1ZGluYWxfdmVsb2NpdHlfbXBzKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2xvcjIgPSAoMCwgdXRpbHNfMS5zZXRDb2xvckRlcGVuZHNPblZlbG9jaXR5KSg4LjMzLCBwMi5sb25naXR1ZGluYWxfdmVsb2NpdHlfbXBzKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIHg6IHAyLnBvc2UucG9zaXRpb24ueCAtIHAxLnBvc2UucG9zaXRpb24ueCxcbiAgICAgICAgICAgICAgICAgICAgeTogcDIucG9zZS5wb3NpdGlvbi55IC0gcDEucG9zZS5wb3NpdGlvbi55LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9ybWFsID0ge1xuICAgICAgICAgICAgICAgICAgICB4OiAtZGlyZWN0aW9uLnksXG4gICAgICAgICAgICAgICAgICAgIHk6IGRpcmVjdGlvbi54LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gTWF0aC5zcXJ0KG5vcm1hbC54ICogbm9ybWFsLnggKyBub3JtYWwueSAqIG5vcm1hbC55KTtcbiAgICAgICAgICAgICAgICBub3JtYWwueCAvPSBsZW5ndGg7XG4gICAgICAgICAgICAgICAgbm9ybWFsLnkgLz0gbGVuZ3RoO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvcm5lcnMgPSBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IHAxLnBvc2UucG9zaXRpb24ueCArIG5vcm1hbC54ICogd2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBwMS5wb3NlLnBvc2l0aW9uLnkgKyBub3JtYWwueSAqIHdpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgejogcDEucG9zZS5wb3NpdGlvbi56ICsgMC4xLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBwMS5wb3NlLnBvc2l0aW9uLnggLSBub3JtYWwueCAqIHdpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogcDEucG9zZS5wb3NpdGlvbi55IC0gbm9ybWFsLnkgKiB3aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHo6IHAxLnBvc2UucG9zaXRpb24ueiArIDAuMSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogcDIucG9zZS5wb3NpdGlvbi54ICsgbm9ybWFsLnggKiB3aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IHAyLnBvc2UucG9zaXRpb24ueSArIG5vcm1hbC55ICogd2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICB6OiBwMi5wb3NlLnBvc2l0aW9uLnogKyAwLjEsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IHAyLnBvc2UucG9zaXRpb24ueCAtIG5vcm1hbC54ICogd2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBwMi5wb3NlLnBvc2l0aW9uLnkgLSBub3JtYWwueSAqIHdpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgejogcDIucG9zZS5wb3NpdGlvbi56ICsgMC4xLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgdHJpYW5nbGVMaXN0LnBvaW50cy5wdXNoKC4uLmNvcm5lcnMpO1xuICAgICAgICAgICAgICAgIHRyaWFuZ2xlTGlzdC5jb2xvcnMucHVzaChjb2xvcjEsIGNvbG9yMSwgY29sb3IyLCBjb2xvcjIpO1xuICAgICAgICAgICAgICAgIHRyaWFuZ2xlTGlzdC5pbmRpY2VzLnB1c2goMCArIGkgKiA0LCAxICsgaSAqIDQsIDIgKyBpICogNCwgMSArIGkgKiA0LCAyICsgaSAqIDQsIDMgKyBpICogNCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzY2VuZVVwZGF0ZSA9IHtcbiAgICAgICAgICAgICAgICBkZWxldGlvbnM6IFtdLFxuICAgICAgICAgICAgICAgIGVudGl0aWVzOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBcInBhdGhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycm93czogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lczogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICBjdWJlczogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICBzcGhlcmVzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGN5bGluZGVyczogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbHM6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dHM6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJpYW5nbGVzOiBbdHJpYW5nbGVMaXN0XSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogbXNnLmhlYWRlci5zdGFtcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lX2lkOiBtc2cuaGVhZGVyLmZyYW1lX2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWVfbG9ja2VkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpZmV0aW1lOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VjOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5zZWM6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6IFtdLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHNjZW5lVXBkYXRlO1xuICAgICAgICB9LFxuICAgIH0pO1xufVxuZXhwb3J0cy5hY3RpdmF0ZSA9IGFjdGl2YXRlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///465\n')},679:(__unused_webpack_module,exports)=>{eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.setColorDependsOnVelocity = void 0;\nfunction setColorDependsOnVelocity(vel_max, cmd_vel) {\n    // Get absolute value of velocity\n    const cmd_vel_abs = Math.abs(cmd_vel);\n    const vel_min = 0.0;\n    // Set color pointer\n    let color = { r: 0, g: 0, b: 0, a: 1.0 };\n    // If velocity is between vel_min and vel_max/2, set color from red to yellow\n    if (vel_min < cmd_vel_abs && cmd_vel_abs <= vel_max / 2.0) {\n        // Get ratio of velocity\n        const ratio = (cmd_vel_abs - vel_min) / (vel_max / 2.0 - vel_min);\n        // Set color\n        color = gradation({ r: 1.0, g: 0, b: 0, a: 1.0 }, { r: 1.0, g: 1.0, b: 0, a: 1.0 }, ratio);\n        // If velocity is between vel_max/2 and vel_max, set color from yellow to green\n    }\n    else if (vel_max / 2.0 < cmd_vel_abs && cmd_vel_abs <= vel_max) {\n        // Get ratio of velocity\n        const ratio = (cmd_vel_abs - vel_max / 2.0) / (vel_max - vel_max / 2.0);\n        // Set color\n        color = gradation({ r: 1.0, g: 1.0, b: 0, a: 1.0 }, { r: 0, g: 1.0, b: 0, a: 1.0 }, ratio);\n        // If velocity is greater than vel_max, set color to green\n    }\n    else if (vel_max < cmd_vel_abs) {\n        color = { r: 0, g: 1.0, b: 0, a: 1.0 };\n        // If velocity is less than vel_min, set color to red\n    }\n    else {\n        color = { r: 1.0, g: 0, b: 0, a: 1.0 };\n    }\n    return color;\n}\nexports.setColorDependsOnVelocity = setColorDependsOnVelocity;\nfunction gradation(color_min, color_max, ratio) {\n    const color = { r: 0, g: 0, b: 0, a: 1.0 };\n    color.r = color_max.r * ratio + color_min.r * (1.0 - ratio);\n    color.g = color_max.g * ratio + color_min.g * (1.0 - ratio);\n    color.b = color_max.b * ratio + color_min.b * (1.0 - ratio);\n    color.a = 1.0; // Assuming full opacity. Adjust as needed.\n    return color;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjc5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsNEJBQTRCLElBQUksOEJBQThCO0FBQzFGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qiw4QkFBOEIsSUFBSSw0QkFBNEI7QUFDMUY7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90cmFqZWN0b3J5Q29udmVydGVyLy4vc3JjL3V0aWxzLnRzP2FlY2UiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNldENvbG9yRGVwZW5kc09uVmVsb2NpdHkgPSB2b2lkIDA7XG5mdW5jdGlvbiBzZXRDb2xvckRlcGVuZHNPblZlbG9jaXR5KHZlbF9tYXgsIGNtZF92ZWwpIHtcbiAgICAvLyBHZXQgYWJzb2x1dGUgdmFsdWUgb2YgdmVsb2NpdHlcbiAgICBjb25zdCBjbWRfdmVsX2FicyA9IE1hdGguYWJzKGNtZF92ZWwpO1xuICAgIGNvbnN0IHZlbF9taW4gPSAwLjA7XG4gICAgLy8gU2V0IGNvbG9yIHBvaW50ZXJcbiAgICBsZXQgY29sb3IgPSB7IHI6IDAsIGc6IDAsIGI6IDAsIGE6IDEuMCB9O1xuICAgIC8vIElmIHZlbG9jaXR5IGlzIGJldHdlZW4gdmVsX21pbiBhbmQgdmVsX21heC8yLCBzZXQgY29sb3IgZnJvbSByZWQgdG8geWVsbG93XG4gICAgaWYgKHZlbF9taW4gPCBjbWRfdmVsX2FicyAmJiBjbWRfdmVsX2FicyA8PSB2ZWxfbWF4IC8gMi4wKSB7XG4gICAgICAgIC8vIEdldCByYXRpbyBvZiB2ZWxvY2l0eVxuICAgICAgICBjb25zdCByYXRpbyA9IChjbWRfdmVsX2FicyAtIHZlbF9taW4pIC8gKHZlbF9tYXggLyAyLjAgLSB2ZWxfbWluKTtcbiAgICAgICAgLy8gU2V0IGNvbG9yXG4gICAgICAgIGNvbG9yID0gZ3JhZGF0aW9uKHsgcjogMS4wLCBnOiAwLCBiOiAwLCBhOiAxLjAgfSwgeyByOiAxLjAsIGc6IDEuMCwgYjogMCwgYTogMS4wIH0sIHJhdGlvKTtcbiAgICAgICAgLy8gSWYgdmVsb2NpdHkgaXMgYmV0d2VlbiB2ZWxfbWF4LzIgYW5kIHZlbF9tYXgsIHNldCBjb2xvciBmcm9tIHllbGxvdyB0byBncmVlblxuICAgIH1cbiAgICBlbHNlIGlmICh2ZWxfbWF4IC8gMi4wIDwgY21kX3ZlbF9hYnMgJiYgY21kX3ZlbF9hYnMgPD0gdmVsX21heCkge1xuICAgICAgICAvLyBHZXQgcmF0aW8gb2YgdmVsb2NpdHlcbiAgICAgICAgY29uc3QgcmF0aW8gPSAoY21kX3ZlbF9hYnMgLSB2ZWxfbWF4IC8gMi4wKSAvICh2ZWxfbWF4IC0gdmVsX21heCAvIDIuMCk7XG4gICAgICAgIC8vIFNldCBjb2xvclxuICAgICAgICBjb2xvciA9IGdyYWRhdGlvbih7IHI6IDEuMCwgZzogMS4wLCBiOiAwLCBhOiAxLjAgfSwgeyByOiAwLCBnOiAxLjAsIGI6IDAsIGE6IDEuMCB9LCByYXRpbyk7XG4gICAgICAgIC8vIElmIHZlbG9jaXR5IGlzIGdyZWF0ZXIgdGhhbiB2ZWxfbWF4LCBzZXQgY29sb3IgdG8gZ3JlZW5cbiAgICB9XG4gICAgZWxzZSBpZiAodmVsX21heCA8IGNtZF92ZWxfYWJzKSB7XG4gICAgICAgIGNvbG9yID0geyByOiAwLCBnOiAxLjAsIGI6IDAsIGE6IDEuMCB9O1xuICAgICAgICAvLyBJZiB2ZWxvY2l0eSBpcyBsZXNzIHRoYW4gdmVsX21pbiwgc2V0IGNvbG9yIHRvIHJlZFxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29sb3IgPSB7IHI6IDEuMCwgZzogMCwgYjogMCwgYTogMS4wIH07XG4gICAgfVxuICAgIHJldHVybiBjb2xvcjtcbn1cbmV4cG9ydHMuc2V0Q29sb3JEZXBlbmRzT25WZWxvY2l0eSA9IHNldENvbG9yRGVwZW5kc09uVmVsb2NpdHk7XG5mdW5jdGlvbiBncmFkYXRpb24oY29sb3JfbWluLCBjb2xvcl9tYXgsIHJhdGlvKSB7XG4gICAgY29uc3QgY29sb3IgPSB7IHI6IDAsIGc6IDAsIGI6IDAsIGE6IDEuMCB9O1xuICAgIGNvbG9yLnIgPSBjb2xvcl9tYXguciAqIHJhdGlvICsgY29sb3JfbWluLnIgKiAoMS4wIC0gcmF0aW8pO1xuICAgIGNvbG9yLmcgPSBjb2xvcl9tYXguZyAqIHJhdGlvICsgY29sb3JfbWluLmcgKiAoMS4wIC0gcmF0aW8pO1xuICAgIGNvbG9yLmIgPSBjb2xvcl9tYXguYiAqIHJhdGlvICsgY29sb3JfbWluLmIgKiAoMS4wIC0gcmF0aW8pO1xuICAgIGNvbG9yLmEgPSAxLjA7IC8vIEFzc3VtaW5nIGZ1bGwgb3BhY2l0eS4gQWRqdXN0IGFzIG5lZWRlZC5cbiAgICByZXR1cm4gY29sb3I7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///679\n')}},__webpack_module_cache__={};function __webpack_require__(I){var g=__webpack_module_cache__[I];if(void 0!==g)return g.exports;var C=__webpack_module_cache__[I]={exports:{}};return __webpack_modules__[I](C,C.exports,__webpack_require__),C.exports}var __webpack_exports__=__webpack_require__(465);module.exports=__webpack_exports__})();